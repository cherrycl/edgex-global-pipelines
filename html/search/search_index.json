{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"EdgeX Global Pipelines Summary This repository contains useful Jenkins global library functions used within the EdgeX Jenkins ecosystem. It provides pre-built pipelines to build and publish Go/C++ based source code in a consistent manner. There are also a lot of utility functions that allow for things like automated vulnerability scanning via Snyk, code coverage tracking via CodeCov.io and many other things. Below you will find some useful links as well as links to all of our documented pipelines. Please note: Documentation is still under heavy development. Useful Links Source Code EdgeX Jenkins Server Jenkins Shared Libraries Jenkins Shared Libraries edgeXBuildCApp edgeXBuildDocker edgeXBuildGoApp","title":"EdgeX Global Pipelines"},{"location":"#edgex-global-pipelines","text":"","title":"EdgeX Global Pipelines"},{"location":"#summary","text":"This repository contains useful Jenkins global library functions used within the EdgeX Jenkins ecosystem. It provides pre-built pipelines to build and publish Go/C++ based source code in a consistent manner. There are also a lot of utility functions that allow for things like automated vulnerability scanning via Snyk, code coverage tracking via CodeCov.io and many other things. Below you will find some useful links as well as links to all of our documented pipelines. Please note: Documentation is still under heavy development.","title":"Summary"},{"location":"#useful-links","text":"Source Code EdgeX Jenkins Server Jenkins Shared Libraries","title":"Useful Links"},{"location":"#jenkins-shared-libraries","text":"edgeXBuildCApp edgeXBuildDocker edgeXBuildGoApp","title":"Jenkins Shared Libraries"},{"location":"libraries/edgeXBuildCApp/","text":"edgeXBuildCApp Shared Library to build C projects Parameters project - Specify your project name dockerBuildFilePath - Specify your Docker Build file Path dockerFilePath - Specify your Dockerfile path pushImage - Set this false if you dont want to push the image to DockerHub, by default true Usage Basic example edgeXBuildCApp ( project: 'device-bacnet-c' , dockerBuildFilePath: 'scripts/Dockerfile.alpine-3.9-base' , dockerFilePath: 'scripts/Dockerfile.alpine-3.9' ) Complex example edgeXBuildCApp ( project: 'device-sdk-c' , dockerBuildFilePath: 'scripts/Dockerfile.alpine-3.11-base' , dockerFilePath: 'scripts/Dockerfile.alpine-3.11' , pushImage: false )","title":"edgeXBuildCApp"},{"location":"libraries/edgeXBuildCApp/#edgexbuildcapp","text":"Shared Library to build C projects","title":"edgeXBuildCApp"},{"location":"libraries/edgeXBuildCApp/#parameters","text":"project - Specify your project name dockerBuildFilePath - Specify your Docker Build file Path dockerFilePath - Specify your Dockerfile path pushImage - Set this false if you dont want to push the image to DockerHub, by default true","title":"Parameters"},{"location":"libraries/edgeXBuildCApp/#usage","text":"","title":"Usage"},{"location":"libraries/edgeXBuildCApp/#basic-example","text":"edgeXBuildCApp ( project: 'device-bacnet-c' , dockerBuildFilePath: 'scripts/Dockerfile.alpine-3.9-base' , dockerFilePath: 'scripts/Dockerfile.alpine-3.9' )","title":"Basic example"},{"location":"libraries/edgeXBuildCApp/#complex-example","text":"edgeXBuildCApp ( project: 'device-sdk-c' , dockerBuildFilePath: 'scripts/Dockerfile.alpine-3.11-base' , dockerFilePath: 'scripts/Dockerfile.alpine-3.11' , pushImage: false )","title":"Complex example"},{"location":"libraries/edgeXBuildDocker/","text":"edgeXBuildDocker Shared Library to build docker images Parameters project - Specify your project name dockerImageName - Specify your Docker Image name semver - Set this true for Semantic versioning dockerNexusRepo - Specify Docker Nexus repository Usage Basic example edgeXBuildDocker ( project: 'docker-edgex-consul' , dockerImageName: 'docker-edgex-consul' , semver: true ) Complex example edgeXBuildDocker ( project: 'edgex-taf-common' , mavenSettings: 'taf-settings' , dockerNexusRepo: 'snapshots' , semver: true )","title":"edgeXBuildDocker"},{"location":"libraries/edgeXBuildDocker/#edgexbuilddocker","text":"Shared Library to build docker images","title":"edgeXBuildDocker"},{"location":"libraries/edgeXBuildDocker/#parameters","text":"project - Specify your project name dockerImageName - Specify your Docker Image name semver - Set this true for Semantic versioning dockerNexusRepo - Specify Docker Nexus repository","title":"Parameters"},{"location":"libraries/edgeXBuildDocker/#usage","text":"","title":"Usage"},{"location":"libraries/edgeXBuildDocker/#basic-example","text":"edgeXBuildDocker ( project: 'docker-edgex-consul' , dockerImageName: 'docker-edgex-consul' , semver: true )","title":"Basic example"},{"location":"libraries/edgeXBuildDocker/#complex-example","text":"edgeXBuildDocker ( project: 'edgex-taf-common' , mavenSettings: 'taf-settings' , dockerNexusRepo: 'snapshots' , semver: true )","title":"Complex example"},{"location":"libraries/edgeXBuildGoApp/","text":"edgeXBuildGoApp Shared Library to build Go projects Parameters project - Specify your project name goVersion - Go version Usage Basic example edgeXBuildGoApp ( project: 'device-random-go' , goVersion: '1.15' ) Complex example edgeXBuildGoApp ( project: 'app-functions-sdk-go' , semver: true , goVersion: '1.15' , testScript: 'make test' , buildImage: false , publishSwaggerDocs: true , swaggerApiFolders: [ 'openapi/v2' ] )","title":"edgeXBuildGoApp"},{"location":"libraries/edgeXBuildGoApp/#edgexbuildgoapp","text":"Shared Library to build Go projects","title":"edgeXBuildGoApp"},{"location":"libraries/edgeXBuildGoApp/#parameters","text":"project - Specify your project name goVersion - Go version","title":"Parameters"},{"location":"libraries/edgeXBuildGoApp/#usage","text":"","title":"Usage"},{"location":"libraries/edgeXBuildGoApp/#basic-example","text":"edgeXBuildGoApp ( project: 'device-random-go' , goVersion: '1.15' )","title":"Basic example"},{"location":"libraries/edgeXBuildGoApp/#complex-example","text":"edgeXBuildGoApp ( project: 'app-functions-sdk-go' , semver: true , goVersion: '1.15' , testScript: 'make test' , buildImage: false , publishSwaggerDocs: true , swaggerApiFolders: [ 'openapi/v2' ] )","title":"Complex example"},{"location":"tutorials/","text":"Tutorials More coming soon! Manual Version Bump Pull Request Sandbox Testing","title":"Tutorials"},{"location":"tutorials/#tutorials","text":"More coming soon! Manual Version Bump Pull Request Sandbox Testing","title":"Tutorials"},{"location":"tutorials/manual-bump/","text":"Manual Version Bump Process Sometimes the version of the edgex-global-pipelines needs to be changed between stable and experimental tags in order to enhance and validate that the changes work as expected. The process documented here outlines the manual process for bumping the version and tag on the global libraries. Committer Access Required You must have write access to the repo to perform this manual version bump process. - Developer must be a member of the devops-core-team as per TSC approval - Version info can be obtained through view of the Jenkins Pipeline log for last successful build $ git clone git@github.com:edgexfoundry/edgex-global-pipelines.git $ cd edgex-global-pipelines $ ./resources/update-named-tag.sh <version> <stable | experimental> Click on image below to view ASCII recording of the manual version bump process","title":"Manual Version Bump Process"},{"location":"tutorials/manual-bump/#manual-version-bump-process","text":"Sometimes the version of the edgex-global-pipelines needs to be changed between stable and experimental tags in order to enhance and validate that the changes work as expected. The process documented here outlines the manual process for bumping the version and tag on the global libraries.","title":"Manual Version Bump Process"},{"location":"tutorials/manual-bump/#committer-access-required","text":"You must have write access to the repo to perform this manual version bump process. - Developer must be a member of the devops-core-team as per TSC approval - Version info can be obtained through view of the Jenkins Pipeline log for last successful build $ git clone git@github.com:edgexfoundry/edgex-global-pipelines.git $ cd edgex-global-pipelines $ ./resources/update-named-tag.sh <version> <stable | experimental>","title":"Committer Access Required"},{"location":"tutorials/manual-bump/#click-on-image-below-to-view-ascii-recording-of-the-manual-version-bump-process","text":"","title":"Click on image below to view ASCII recording of the manual version bump process"},{"location":"tutorials/pr-commit-for-testing/","text":"Pull Request Sandbox Testing Introduction The EdgeX Jenkins Production Server and EdgeX Jenkins Sandbox Server are configured to use the edgex-global-pipelines library. The servers target either stable or experimental tags for Production and Sandbox servers respectively. To make functional testing of Jenkins Shared Pipeline Libraries more convenient, you can use a commit hash from a Pull Request into edgex-global-pipelines to override the default pipeline version that the Jenkins server is using. ( stable / experimental ) Step 1 - Create Draft PR When you have changes you'd like to functionally test, open a Draft Pull Request from your forked repository of edgex-global-pipelines into edgex-global-pipelines:master Make clear that this is a PR for functional testing purposes and is not meant to be merged. Step 2 - Use PR Commit Hash Find the commit hash of your draft PR. Place the commit hash into your Jenkinsfile that is under test. The EdgeX Sample-Service is a good place to functionally test shared libraries without affecting production code. Add the commit hash after the '@' in the explicit library import statement as shown below. @Library ( \"edgex-global-pipelines@7eba319\" ) _ edgeXBuildGoApp ( project: 'sample-service' , goVersion: '1.15' , buildExperimentalDockerImage: true ) Step 3 - Execute Jenkinsfile When you execute your functional test build job on the sandbox, the commit hash of your PR will be shown as the commit used for the edgex-global-pipeline shared library. You will see a message similar to the following in your build job console output. ... Loading library edgex-global-pipelines@7eba319 Attempting to resolve 7eba319 from remote references... ... Step 4 - Finishing Up When you are satisfied that the content of your edgex-global-pipelines fork is functionally tested and ready to be merged, you can convert your draft PR into a real PR and add the appropriate reviewers. After your PR is merged to master, the experimental tag will point to your newest content. You might want to test your new code by switching back to the experimental tag in your Jenkinsfile. @Library ( \"edgex-global-pipelines@experimental\" ) _ Please clean up and close your PR after you have finished your functional testing.","title":"Pull Request Sandbox Testing"},{"location":"tutorials/pr-commit-for-testing/#pull-request-sandbox-testing","text":"","title":"Pull Request Sandbox Testing"},{"location":"tutorials/pr-commit-for-testing/#introduction","text":"The EdgeX Jenkins Production Server and EdgeX Jenkins Sandbox Server are configured to use the edgex-global-pipelines library. The servers target either stable or experimental tags for Production and Sandbox servers respectively. To make functional testing of Jenkins Shared Pipeline Libraries more convenient, you can use a commit hash from a Pull Request into edgex-global-pipelines to override the default pipeline version that the Jenkins server is using. ( stable / experimental )","title":"Introduction"},{"location":"tutorials/pr-commit-for-testing/#step-1-create-draft-pr","text":"When you have changes you'd like to functionally test, open a Draft Pull Request from your forked repository of edgex-global-pipelines into edgex-global-pipelines:master Make clear that this is a PR for functional testing purposes and is not meant to be merged.","title":"Step 1 - Create Draft PR"},{"location":"tutorials/pr-commit-for-testing/#step-2-use-pr-commit-hash","text":"Find the commit hash of your draft PR. Place the commit hash into your Jenkinsfile that is under test. The EdgeX Sample-Service is a good place to functionally test shared libraries without affecting production code. Add the commit hash after the '@' in the explicit library import statement as shown below. @Library ( \"edgex-global-pipelines@7eba319\" ) _ edgeXBuildGoApp ( project: 'sample-service' , goVersion: '1.15' , buildExperimentalDockerImage: true )","title":"Step 2 - Use PR Commit Hash"},{"location":"tutorials/pr-commit-for-testing/#step-3-execute-jenkinsfile","text":"When you execute your functional test build job on the sandbox, the commit hash of your PR will be shown as the commit used for the edgex-global-pipeline shared library. You will see a message similar to the following in your build job console output. ... Loading library edgex-global-pipelines@7eba319 Attempting to resolve 7eba319 from remote references... ...","title":"Step 3 - Execute Jenkinsfile"},{"location":"tutorials/pr-commit-for-testing/#step-4-finishing-up","text":"When you are satisfied that the content of your edgex-global-pipelines fork is functionally tested and ready to be merged, you can convert your draft PR into a real PR and add the appropriate reviewers. After your PR is merged to master, the experimental tag will point to your newest content. You might want to test your new code by switching back to the experimental tag in your Jenkinsfile. @Library ( \"edgex-global-pipelines@experimental\" ) _ Please clean up and close your PR after you have finished your functional testing.","title":"Step 4 - Finishing Up"}]}